---
layout: post
title: "Introducing debugging, source code and symbols for NuGet packages"
date: 2016-01-05 15:49:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["Development", "Feature", "NuGet"]
alias: ["/post/2016/01/05/Introducing-debugging-source-code-and-symbols-for-NuGet-packages.aspx", "/post/2016/01/05/introducing-debugging-source-code-and-symbols-for-nuget-packages.aspx"]
author: "Maarten Balliauw"
redirect_from:
 - /post/2016/01/05/Introducing-debugging-source-code-and-symbols-for-NuGet-packages.aspx.html
 - /post/2016/01/05/introducing-debugging-source-code-and-symbols-for-nuget-packages.aspx.html
---

<p>Shortly after we launched MyGet, we teamed up with <a href="/post/2011/11/16/Publishing-symbol-packages-for-a-MyGet-feed.aspx">SymbolSource.org to provide support for .NET debugger symbols</a>. Today, we’re happy to announce a second option: integrated MyGet symbols support! MyGet symbols support lets consumers of our NuGet packages step through the source code and integrate with Visual Studio and tools like WinDbg. Additionally, symbols and sources can be consumed from within MyGet as well.</p> <p>Head over to our docs and learn how to <a href="http://docs.myget.org/docs/reference/symbols">get started with MyGet symbols</a> support!</p> <p align="center"><a href="/images/image_132.png"><img width="724" height="514" title="image" style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="/images/image_thumb_130.png" border="0"></a></p> <h2>How do I get started?</h2> <p>Documentation is available that will help you <a href="http://docs.myget.org/docs/reference/symbols">get started with MyGet symbols</a> very quickly. Symbols in .NET can be tricky sometimes, so if things don’t work out as expected we’ve also compiled a list of <a href="http://docs.myget.org/docs/reference/symbols#Troubleshooting">PDB troubleshooting tips</a>.</p> <p>To make things easy, the endpoint for pushing symbols packages is the same as that for your regular NuGet packages: <a href="https://www.myget.org/F/<feedname>/api/v2/package">https://www.myget.org/F/&lt;feedname&gt;/api/v2/package</a>. MyGet will determine the type of package and act accordingly. This makes pushing symbols packages from your build server, like TeamCity or Visual Studio Team Services similar to pushing regular NuGet packages.</p> <h2>Where do my symbols packages go when I use MyGet Build Services?</h2> <p>For new feeds, symbols packages are pushed to your MyGet feed by default. For existing feeds, symbols will be uploaded to SymbolSource (if this was enabled). From the build configuration, you can <a href="http://docs.myget.org/docs/reference/build-services#Pushing_symbols">select where to push symbols packages</a>.</p> <h2>What happens to the SymbolSource integration?</h2> <p>SymbolSource integration is still available. Our customers asked very loudly for integrated symbols support, so we’re delivering on that. We are still providing the option to use SymbolSource with your MyGet feeds. In fact, they have some great <a href="http://tripleemcoder.com/2015/10/04/moving-to-the-new-symbolsource-engine/">new features</a> planned as well!</p> <p>Head over to our docs and learn how to <a href="http://docs.myget.org/docs/reference/symbols">get started with MyGet symbols</a> support!</p> <p><em>Happy packaging! (and efficient debugging, of course)</em></p>

