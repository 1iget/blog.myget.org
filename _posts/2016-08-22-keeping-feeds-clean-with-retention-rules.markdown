---
layout: post
title: "Keeping feeds clean with retention rules"
date: 2016-08-22 10:03:00 +0200
comments: true
published: true
categories: ["post"]
tags: ["Bower", "Development", "Feature", "Npm", "NuGet", "Vsix"]
alias: ["/post/2016/08/22/Keeping-feeds-clean-with-retention-rules.aspx", "/post/2016/08/22/keeping-feeds-clean-with-retention-rules.aspx"]
author: "Xavier Decoster"
redirect_from:
 - /post/2016/08/22/Keeping-feeds-clean-with-retention-rules.aspx.html
 - /post/2016/08/22/keeping-feeds-clean-with-retention-rules.aspx.html
---

<p><a href="/images/image_140.png"><img width="170" height="240" title="MyGet Package Retention Rules help clean up your NuGet npm feed" align="right" style="margin: 0px 0px 5px 5px; border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: right; display: inline; background-image: none;" alt="MyGet Package Retention Rules help clean up your NuGet npm feed" src="/images/image_thumb_138.png" border="0"></a>Many developer teams use MyGet for <a href="http://www.myget.org">storing their continuous integration and/or nightly builds</a> of NuGet, npm, Bower and VSIX packages. As more and more packages get added, it may become harder to manage them all. Some packages may be used in projects, while others are not. Let’s go over the options available for housekeeping.</p> <p>By default, MyGet keeps all package versions available on our feeds. Every package pushed is there forever, unless manually removed or removed by package retention. By setting retention rules, it is possible to automatically trim the list of packages to X latest packages, keeping into account package usage in projects and package dependency trees.</p> <h2></h2> <h2>Configuring retention rules</h2> <p>Retention rules are defined per feed. Some feeds may have more aggressive retention rules defined, other may not have them enabled at all. From the <strong><em>Retention Rules</em></strong>, we can define:</p> <ul> <li>the maximum number of stable versions to keep</li> <li>the maximum number of prerelease versions to keep</li> <li>whether to keep depended packages or not – enabling this makes sure package restores always complete successfully by keeping the dependency tree in its entirety</li> <li>whether to allow removal of packages that have downloads – enabling this option ensures that packages that are being used in projects never get deleted</li></ul> <p><a href="/images/image_141.png"><img width="800" height="682" title="defining the maximum number of stable versions to keep * defining the maximum number of prerelease versions to keep * defining whether to keep depended packages or not * defining whether to allow removal of packages that have downloads" style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="Setting retention rules" src="/images/image_thumb_139.png" border="0"></a></p> <h2>Keeping a specific package around</h2> <p>Retention rules are quite brute-force: they will always remove all packages that match the configured rules. Luckily, MyGet lets us “pin” packages which we want to keep around. For example, we may want to only keep the latest 10 pre-release versions while still keeping around the 20th pre-release version we’re still using in our projects.</p> <p>From the <strong><em>package details</em></strong> page, we can define which package versions should never be considered by retention rules by using the <strong><em>Pin</em></strong> button next to the package. <p><a href="/images/image_142.png"><img width="800" height="213" title="Pinning packages so they do not get removed" style="border: 0px currentColor; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="Pinning packages so they do not get removed" src="/images/image_thumb_140.png" border="0"></a> <p>We can pin package per version, or all versions at once using the button at the top of the <em>Package History</em> list. Of course, we can also <strong>Unpin</strong> packages using the same approach. Once a package is unpinned, retention rules are allowed to remove them.<br> <h2>Custom retention rules using web hooks</h2> <p>Using the built-in retention rules may not be enough. For example, what if we want to run retention rules based on other conditions than the latest version? What if we want to only remove packages when there is a full moon? Using web hooks, we can subscribe to certain feed events (like “package added”) and run our custom logic to optionally remove packages from our feed. We have a <a href="http://docs.myget.org/docs/reference/package-retention#Custom_package_retention_rules_using_webhooks">complete example available that helps getting started with web hooks</a>.</p> <p>Learn <a href="http://docs.myget.org/docs/reference/package-retention">more about package retention</a> in our documentation.</p> <p><em>Happy packaging!</em></p>

