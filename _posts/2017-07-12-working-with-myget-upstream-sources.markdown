---
layout: post
title: "Working with MyGet upstream sources"
date: 2017-07-12 11:45:00 +0200
comments: true
published: true
categories: ["post"]
tags: ["Bower", "Development", "Feature", "Maven", "Npm", "NuGet", "Vsix"]
alias: ["/post/2017/07/12/Working-with-MyGet-upstream-sources.aspx", "/post/2017/07/12/working-with-myget-upstream-sources.aspx"]
author: "Xavier Decoster"
redirect_from:
 - /post/2017/07/12/Working-with-MyGet-upstream-sources.aspx.html
 - /post/2017/07/12/working-with-myget-upstream-sources.aspx.html
---

<p>Upstream sources play a key role in a professional approach towards Package Management. <a href="https://www.myget.org/">MyGet</a> gives you the option to specify one or more upstream sources for a package feed. Even though this feature has been available on MyGet for years now, we feel it upstream sources deserve a place in the spotlight once: they enable various scenarios that are impossible on any other package management service, and above all: they are a huge facilitator for a smooth and automated development workflow (and thus developer happiness :-)). </p><p>In this post: </p><ul> <li>Why upstream sources?</li> <li>Supported upstream sources</li></ul> <h2>Why use upstream sources?</h2> <p>In bullet-form:</p> <ul> <li>Upstream sources make it very easy to pull in packages from other package sources onto your downstream MyGet feeds. </li> <li>You can also target these upstream sources to push packages upstream from your MyGet feeds. </li> <li>Any configured upstream source on your MyGet feed will be made available to you in MyGet Build Services, without having to commit any secrets such as credentials or API keys in your source repository. If you're using NuGet: no need to create a <em>nuget.config</em> file!</li></ul> <p>If you are confused about the usage of "<i>upstream</i>" and "<i>downstream</i>" in the context of package sources, we've got a little poetic explanation for you, which may already help you visualize the relationship between package consumers, your MyGet feeds, and your feed's upstream sources. </p>
<blockquote> <p>Consider the direction in which packages are flowing from a given package source to an ocean of consumers.Your package may have dependencies "upstream", to packages on another feed. From the point of view of those dependencies, the depending package is located "downstream". When a user consumes the downstream package, it will also fetch the upstream dependencies.The consumer, however, is only allowed to fetch or query those upstream packages if the feed being queried (downstream) is also configured to proxy (or mirror) the upstream package source.</p>
</blockquote>
 <br><h2>Supported upstream sources</h2>
<p>By default, MyGet feeds have the public, central repositories configured for each package type. This includes:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">NuGet: https://www.nuget.org/api/v2</li><li style="line-height: 20px;">Bower: https://bower.herokuapp.com</li><li style="line-height: 20px;">npm: http://registry.npmjs.org</li><li style="line-height: 20px;">Maven: https://repo1.maven.org/maven2</li></ul><p>To configure an additional upstream source for your MyGet feed, navigate to&nbsp;<em>Feed Settings &gt; Upstream Sources</em>. Then click&nbsp;<em>Add Upstream Source&nbsp;</em>and select the package source type you want to add.</p><p><img src="http://docs.myget.org/docs/reference/Images/add-package-source-button.png" alt="" style="height: auto;"></p><p>A dialog will prompt your for upstream source information and will also expose a few common presets for you to take advantage of. Did you know we even support Dropbox?!</p><h4 id="Package_Source_Credentials" style="margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: bold; line-height: 20px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 17.5px;">Upstream Source Credentials</h4><p>If you have any access privileges to other MyGet feeds, you will see those in the MyGet Feeds presets, so you can easily build a chain of package sources to facilitate a&nbsp;<em>package promotion flow</em>.</p><p><img src="http://docs.myget.org/docs/reference/Images/add-package-source-MyGet-preset.png" alt="" style="height: auto;"></p><p>If you select a private MyGet feed you have access to as an upstream source, there's no need to provide credentials to be able to restore packages from it on MyGet Build Services. MyGet will impersonate your user account when authenticating against that upstream source.</p><p>For any non-MyGet upstream source that requires authentication to pull packages, you'll have to provide username and password to be used during Basic Authentication.</p><p class="alert alert-warning" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-color: rgb(251, 238, 213); border-radius: 0px; color: rgb(248, 148, 6); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><strong>Warning!</strong>&nbsp;<span style="text-decoration-line: underline;">Be very careful with password managers and browser add-ons providing auto-completion of credentials!</span><br>We recommend disabling these credential managers on the MyGet web site to avoid issues when editing upstream sources. Oftentimes, these tools auto-complete the credentials fields with out-dated credentials (even when editing different settings in the dialog).&nbsp;<br>When running into package restore failures on MyGet Build Services, or when noticing that upstream packages are no longer available downstream, this is the most common source of the issue.</p><p>In the opposite direction, in order to push packages from your downstream MyGet feed to the upstream source, you may need to configure a (scoped) API key or access token.</p><h4 id="Package_Source_Filtering" style="margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: bold; line-height: 20px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 17.5px;">Package Source Filtering</h4><p class="alert alert-info" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-radius: 0px; color: rgb(4, 156, 219); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Applies to:&nbsp;<strong>NuGet (v2 only!)</strong></p><p>When the upstream source is a v2 NuGet feed, you may configure additional OData filtering. Filtering is based on the&nbsp;<a href="http://www.odata.org/documentation/odata-version-3-0/odata-version-3-0-core-protocol#thefiltersystemqueryoption" style="color: rgb(0, 128, 0);">OData v3 Filtering System</a>. Valid filters are similar to&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">Id eq 'jQuery'</code>&nbsp;or&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">IsLatestVersion eq true and Id ne 'Foo'</code>.</p><p class="alert alert-warning" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-color: rgb(251, 238, 213); border-radius: 0px; color: rgb(248, 148, 6); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><strong>Warning!</strong>&nbsp;This capability may go away at some point in favor of newer NuGet v3 APIs.<br>We currently still keep the feature around for some scenarios that are not yet fully supported on NuGet v3.</p><h3 id="Adding_a_package_from_another_package_source" style="margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI Light&quot;, Arial, Helvetica; font-weight: bold; line-height: 40px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 24.5px;">Adding a package from an upstream source</h3><p>You can easily add packages to your MyGet feed originating from an upstream source, such as nuget.org, nmpjs.org, etc. This is using the feed's configured upstream sources under the hood. If you want to add a package from another feed onto your MyGet feed, the other feed needs to be configured as an upstream source to that feed.</p><p>Adding a package from an upstream source can happen in three ways: manually, by reference (proxying), or by value (mirroring).</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;"><strong>Manually</strong>: you can add packages from an upstream source to your feed manually by using the&nbsp;<em>Add Package</em>&nbsp;button you will find under your feed's&nbsp;<em>Packages</em>&nbsp;page.</li></ul><p><img src="http://docs.myget.org/docs/reference/Images/add-package-button.png" alt="" style="height: auto;"></p><p>Select&nbsp;<em>From Feed</em>&nbsp;in the dialog that prompts.</p><p><img src="http://docs.myget.org/docs/reference/Images/add-package-from-feed.png" alt="" style="height: auto;"></p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;"><strong>Proxying</strong>: the package metadata is copied to the MyGet feed, the package itself remains hosted on the upstream source. When querying the package, we call the upstream source to fetch the package.</li><li style="line-height: 20px;"><strong>Mirroring</strong>: the package metadata and the package itself are copied onto the MyGet feed. When querying the package, we server the package directly and don't use the upstream source. Mirroring of a package version happens upon the first request for that given package version.</li></ul><p>Configuring upstream sources on your MyGet feed unlocks quite a few integration scenarios and automation opportunities!</p><p><img src="http://docs.myget.org/docs/reference/Images/package-source-compatibility.png" alt="" style="height: auto;"></p><h4 id="Proxy_packages_from_another_package_source" style="margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: bold; line-height: 20px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 17.5px;">Proxy packages from an upstream source</h4><p>You can configure an upstream source to proxy upstream packages through your MyGet feed to your feed consumers. Proxying makes it easy to have a single MyGet feed aggregate packages from multiple sources. Package consumers need only to configure a single MyGet feed, and all packages available on upstream, proxied package sources will become available to them.</p><p>Benefits:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">upstream packages do not count against your MyGet storage quota</li><li style="line-height: 20px;">authentication against upstream, private MyGet sources happens automatically (see&nbsp;<span style="color: rgb(0, 128, 0);"><a href="http://docs.myget.org/docs/reference/upstream-sources#Upstream_Source_Credentials">Upstream Source Credentials</a></span>)</li><li style="line-height: 20px;">especially for NuGet: no longer subject to chatty clients reaching out to all configured feeds during dependency resolution (MyGet can be smarter server-side)</li></ul><p>Drawbacks:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">every package request will incur additional latency as opposed to storing the package onto the MyGet feed</li></ul><p class="alert alert-warning" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-color: rgb(251, 238, 213); border-radius: 0px; color: rgb(248, 148, 6); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><strong>Warning!</strong>&nbsp;Avoid configuring multiple package source proxies on a single feed, or in a chain of feeds, as this will magnify the disadvantages, and result in very slow feed response times.</p><p>The following diagram illustrates the effects of upstream source proxying.</p><p><img src="http://docs.myget.org/docs/reference/Images/package-source-proxying.png" alt="" style="height: auto;"></p><p>To enable upstream source proxying, you must tick the check-mark next to&nbsp;<em>Make all upstream packages available in clients</em>.</p><p><img src="http://docs.myget.org/docs/reference/Images/setting-package-source-proxying.png" alt="" style="height: auto;"></p><h3 id="Mirror_packages_from_another_package_source" style="margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI Light&quot;, Arial, Helvetica; font-weight: bold; line-height: 40px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 24.5px;">Mirror packages from an upstream source</h3><p>You can configure an upstream source to mirror upstream packages onto your MyGet feed. This configuration is similar to package proxying, but takes it one step further.</p><p>Whenever someone requests a particular package from your MyGet feed for the first time, MyGet will query the upstream source and copy the package onto the MyGet feed.</p><p>Benefits:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">No additional latency (except for the first hit that triggers the package mirroring)</li><li style="line-height: 20px;">Protected against upstream source availability issues</li><li style="line-height: 20px;">Protected against upstream package removal</li><li style="line-height: 20px;">Authentication against upstream, private MyGet feeds happens automatically (see&nbsp;<span style="color: rgb(0, 128, 0);"><a href="http://docs.myget.org/docs/reference/upstream-sources#Upstream_Source_Credentials">Upstream Source Credentials</a></span>)</li><li style="line-height: 20px;"><span style="font-weight: bold;">Faster builds!</span></li></ul><p>Drawbacks:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">Mirrored packages count towards your MyGet storage quota (a classic <span style="font-style: italic;">storage versus speed</span>&nbsp;trade-off, you can always upgrade your subscription or&nbsp;<a href="mailto:support@myget.org" style="color: rgb(0, 128, 0);">request a quote</a>!)</li></ul><p>The following diagram illustrates the effects of upstream source mirroring.</p><p><img src="http://docs.myget.org/docs/reference/Images/package-source-mirroring.png" alt="" style="height: auto;"></p><p>To enable upstream source mirroring, you must tick the check-mark next to&nbsp;<em>Automatically add downloaded upstream packages to the current feed (mirror)</em>.</p><p><img src="http://docs.myget.org/docs/reference/Images/setting-package-source-mirroring.png" alt="" style="height: auto;"></p><p>Optionally, you can also tick the third check-mark to indicate that any package found upstream is to be considered a&nbsp;<em>package dependency&nbsp;</em>(and should not be consumed directly). This will hide those packages from search results, whilst still allowing you to restore them.</p><p>Once upstream source mirroring is enabled, we can consume our MyGet feed from Visual Studio which will also list upstream packages. For example, the example&nbsp;<em>acmecompany</em>&nbsp;feed only lists one package:</p><p><img src="http://docs.myget.org/docs/reference/Images/acmefeed-one-package.png" alt="One package on our feed" style="height: auto;"></p><p>When searching in Visual Studio, we do see packages that originate from upstream sources:</p><p><img src="http://docs.myget.org/docs/reference/Images/acmefeed-upstream-search.png" alt="Visual Studio showing upstream packages" style="height: auto;"></p><p>After installing this package, our feed now automatically contains a copy of the jQuery package:</p><p><img src="http://docs.myget.org/docs/reference/Images/acmefeed-two-packages.png" alt="Mirror upstream pckages" style="height: auto;"></p><p>From now on, the package is available from our MyGet feed directly, without having to explicitly add it manually from the upstream source.</p><h3 id="Using_a_MyGet_feed_as_a_staging_area_before_pushing_upstream" style="margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI Light&quot;, Arial, Helvetica; font-weight: bold; line-height: 40px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 24.5px;">Using a MyGet feed as a staging area (before pushing upstream)</h3><p>Many development teams are using some kind of&nbsp;<em>package promotion workflow</em>: pushing a package from one feed to another based on quality gates, target audience, or any other criteria. This is very typical scenario for which upstream sources are essential.</p><p>Of course, all of this can happen in an automated fashion using package manager client. However, as promoting a package typically involves some kind of human intervention (e.g. release manager approval), we've also made it a first-class feature in the MyGet web site.</p><p>Simply pick the package version you want to promote from the package details page, and hit the&nbsp;<em>Push</em>&nbsp;button to initiate the package promotion flow.</p><p><img src="http://docs.myget.org/docs/reference/Images/push-upstream-button.png" alt="" style="height: auto;"></p><p>A dialog will provide you with additional options. MyGet is also smart enough to detect any package dependencies you might want to push along in one go as part of this package promotion flow.</p><p><img src="http://docs.myget.org/docs/reference/Images/push-package-upstream-dialog.png" alt="" style="height: auto;"></p><p>At this point, you can still make a few metadata changes before pushing upstream. This dialog allows you to:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">modify or remove the prerelease label of the upstream package version. This allows you to e.g. drop the prerelease label to&nbsp;<em>release</em>&nbsp;a package without rebuilding/repackaging.</li><li style="line-height: 20px;">add release notes to be included in the package metadata. MyGet will even support release notes written in markdown and render them properly on the web site!</li><li style="line-height: 20px;">modify or remove the SemVer2 build metadata part of the upstream package version</li><li style="line-height: 20px;">exclude any detected dependencies or satellite packages from the push action</li><li style="line-height: 20px;">apply source labeling if the package was built using MyGet Build Services. When enabled, MyGet will find the build from which the package originated and will add a label to the source control revision it was built from.</li></ul><p>To edit a package's metadata, simply click the&nbsp;<em>Edit</em>&nbsp;button next to it and make the modifications. To apply a given modification to all packages in the dialog, hit the&nbsp;<em>rain drop</em>&nbsp;button next to the editable field.</p><p><img src="http://docs.myget.org/docs/reference/Images/push-upstream-edit-package.png" alt="" style="height: auto;"></p><h3 id="Using_upstream_package_sources_on_MyGet_Build_Services" style="margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI Light&quot;, Arial, Helvetica; font-weight: bold; line-height: 40px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 24.5px;">Using upstream sources on MyGet Build Services</h3><p class="alert alert-info" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-radius: 0px; color: rgb(4, 156, 219); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Applies to:&nbsp;<strong>NuGet, npm</strong></p><p>Upstream sources for a feed are also available during build. This can be useful in the following scenarios:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">An additional upstream source is needed during build. MyGet will make the upstream source available during build if it has been added to the feed's upstream sources.</li><li style="line-height: 20px;">If you have a private feed requiring authentication but do not wish to add credentials to source control, credentials can be added to the feed's upstream source. These credentials will be available during build and allow you to consume a protected feed with ease.</li></ul><p class="alert alert-info" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-radius: 0px; color: rgb(4, 156, 219); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Applies to:&nbsp;<strong>NuGet</strong></p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">The API key for an upstream source is also made available during the build process. This means during a build, you can call into&nbsp;<a href="https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference#push" style="color: rgb(0, 128, 0);"><code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">nuget.exe push</code></a>&nbsp;and push packages to configured upstream sources.</li><li style="line-height: 20px;">If you want to make use of&nbsp;<a href="https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference#push" style="color: rgb(0, 128, 0);"><code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">nuget.exe push</code></a>&nbsp;in a build script without having to specify the&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">-Source</code>&nbsp;parameter. This requires a default upstream source to be defined.</li></ul><p class="alert alert-info" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-radius: 0px; color: rgb(4, 156, 219); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Applies to:&nbsp;<strong>npm</strong><br>We strongly suggest to&nbsp;<i>proxy</i>&nbsp;registry.npmjs.org to be able to run `npm install` during build, as npm will default to the MyGet feed as the default registry.</p><h4 id="Setting_default_package_sources_to_be_used_on_a_MyGet_feeds_build_services" style="margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: bold; line-height: 20px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 17.5px;">Setting default upstream sources to be used on MyGet Build Services</h4><p class="alert alert-info" style="padding: 8px 35px 8px 14px; text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; border-radius: 0px; color: rgb(4, 156, 219); font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Applies to:&nbsp;<strong>NuGet</strong></p><p>The&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">NuGet.config</code>&nbsp;file on our build agents is configured using NuGet's defaults, enriched with all NuGet upstream sources configured for your MyGet feed. Based on these defaults, the following conventions are active:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;">The default upstream source is set to&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">(Aggregate Source)</code>, meaning all feeds will be queried for packages in the order defined in the feed's upstream sources.</li><li style="line-height: 20px;">The default push source (when using&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">nuget push</code>&nbsp;without the&nbsp;<code style="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(221, 17, 68); border-radius: 3px; background-color: rgb(247, 247, 249); border: 1px solid rgb(225, 225, 232); white-space: nowrap;">-Source</code>&nbsp;parameter) is NuGet.org.</li></ul><p>Both of these conventions can be overridden by editing the build source configuration.</p><h3 id="Auto_updating_packages" style="margin-top: 10px; margin-right: 0px; margin-left: 0px; font-family: &quot;Segoe UI Light&quot;, Arial, Helvetica; font-weight: bold; line-height: 40px; color: rgb(102, 102, 102); text-rendering: optimizeLegibility; font-size: 24.5px;">Auto updating packages</h3><p>MyGet feeds can automatically fetch package updates made available through the upstream sources.</p><p>When adding or editing a upstream source, we can enable this behaviour per package source, as well as an interval when MyGet should check for updates.</p><p><img src="http://docs.myget.org/docs/reference/Images/add-package-source-options.png" alt="Package Source Options" style="height: auto;"></p><p>The following options are available:</p><ul style="padding: 0px; margin-right: 0px; margin-left: 25px; font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><li style="line-height: 20px;"><strong>E-mail me when package updates are available</strong>: Sends an e-mail to the specified recipient(s) when package updates are available on the upstream source.</li><li style="line-height: 20px;"><strong>Include prerelease versions</strong>: By default, MyGet will only consider stable packages. When enabled, we will also check pre-release packages from the upstream source.</li><li style="line-height: 20px;"><strong>Automatically update packages to their latest versions</strong>: Enables the behavior of automatically updating packages from the upstream source.</li><li style="line-height: 20px;"><strong>Update interval</strong>: Depending on your subscription plan, we can specify how often MyGet should check for updates (up to every 30 minutes on a&nbsp;<a href="https://www.myget.org/plans" style="color: rgb(0, 128, 0);">Professional subscription</a>)</li></ul><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><br></span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">As you can see, MyGet's support for upstream package sources unlocks a wide range of package management scenarios that may help you streamline your development flow and package governance even more. If you haven't tried the above scenarios yet, do give them a try and experience how it may make your life easier.</span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><br></span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif;">Oh, and we do support pushing your private symbols packages upstream along with your NuGet packages, too!</span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif;"><br></span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-style: italic;">Happy Packaging!</span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-style: italic;"><br></span></div><div><span style="font-family: &quot;Segoe UI&quot;, Arial, sans-serif; font-style: italic;">PS: Please take 10 seconds of your precious time to <a href="https://www.surveybuilder.com/s/1bV59" target="_blank" style="background-color: rgb(255, 255, 0); font-weight: bold;">tell us how we're doing</a>!&nbsp;</span></div>
{% include imported_disclaimer.html %}
