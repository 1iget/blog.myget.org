---
layout: post
title: "Online gaming with OCTGN and NuGet"
date: 2013-08-21 10:05:00 +0200
comments: true
published: true
categories: ["post"]
tags: ["NuGet", "Stories"]
alias: ["/post/2013/08/21/Online-gaming-with-OCTGN-and-NuGet.aspx", "/post/2013/08/21/online-gaming-with-octgn-and-nuget.aspx"]
author: "Maarten Balliauw"
redirect_from:
 - /post/2013/08/21/Online-gaming-with-OCTGN-and-NuGet.aspx.html
 - /post/2013/08/21/online-gaming-with-octgn-and-nuget.aspx.html
---

<p><a href="http://octgn.net"><img title="OCTGN online card and table game network" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; margin: 5px 10px 5px 5px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="OCTGN online card and table game network" align="right" src="/images/clip_image002.jpg" width="155" height="73" /></a>We’ve been looking through some of the feeds that are hosted on MyGet and have found a nice use case for both NuGet and MyGet: the open-source project <a href="http://octgn.net/">OCTGN</a>, the Online Card and Table Game Network. As a result of that, we’ve had a chat with Kelly Elton, developer and maintainer of OCTGN.</p>  <h2>Can you tell us a little bit about OCTGN?</h2>  <p>“The title of the game kind of summarizes this, but OCTGN is a gaming platform that allows users to play card and board games with each other on the Internet. After installation, gamers get a virtual table top where they can download additional games from a repository, chat with other gamers and compete against each other.”</p>  <h2>We’re assuming that the games repository is in fact a NuGet feed, is that correct?</h2>  <p>Yeah, that’s an interesting one. Started using NuGet a while ago and it occurred to me that you could use NuGet as an application update system. It has metadata in there which you can query and the NuGet.Core assembly gives you a nice library for working with it.</p>  <p>Originally, our users would download an OPC (Open Packaging Conventions) file which is essentially a ZIP file. A NuGet package essentially also is an OPC package, so we were already using some form of packaging for distributing games before. And then we did some rework and tore some pieces apart and realized we could start packaging using NuGet to get things like searchable metadata, a formal upgrade system and so on.”</p>  <h2>A lot of the games are card games, are you embedding the card artwork in the NuGet packages as well?</h2>  <p>“No. Sets of cards can be 100 MB to 200 MB in size. Not all players will use all cards all the time and we don’t want game updates to download all artwork when it hasn’t changed between versions. Also we have a card proxy which generates images from card data on the fly if they don't exist, which allows us to cram a game that used to require 100MB of images to play into a 10MB package, with the option to download the cards from another source if they so choose.</p>  <p>We developed a system that allows you to specify the metadata for the cards which is kind of a specialized markup language and then download the artwork on-the-fly, only when needed.” </p>  <h2>Who is developing the games for OCTGN? How can someone contribute?</h2>  <p><a href="/images/clip_image004.jpg"><img title="In-game screenshot" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: left; padding-top: 0px; padding-left: 0px; margin: 0px 10px 0px 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="In-game screenshot" align="left" src="/images/clip_image004_thumb.jpg" width="240" height="140" /></a>”Most of the games are developed by community members. OCTGN has been around since 2006 and has changed hands a few times but it’s essentially run by the community. I’m currently doing most of the development but I have some people helping me. The games themselves are developed by people, using Python and XML. We have a builder (o8build) which comes with OCTGN, takes the Python code and XML files and packages everything up so our game developers don’t have to know too much about NuGet themselves. There’s some info about that <a href="https://github.com/kellyelton/OCTGN/blob/master/HACK.md">on our GitHub space</a>.</p>  <p>Contributions are done in several ways. We have different NuGet feeds that are managed by game owners, we also have our official feeds that contain games that we want to be part of our system. You get added to that feed based on different metrics like game quality, how active development is and so on. There are different feeds maintained by other members of the community and they can take on some games as well.</p>  <p>We only host the official feed, but since it's so easy to get setup with MyGet, people in the community have had no problems at all setting up their own feeds.</p>  <h2>Are all feeds public feeds?</h2>  <p>“Some of our game developers asked if it would be possible to make a private feed for their games, we’re now looking into adding support for that in our client. We weren’t sure how we could authenticate the user towards these private feeds as the NuGet client libraries aren’t that well documented. But I’ve seen there is an <i>ICredentialProvider</i> interface in there we can probably use.”</p>  <h2>How has your experience with MyGet been so far?</h2>  <p>“Very good, we’ve enjoyed it quite a bit. We didn’t quite know if it was going to be the right system for the job at first as we were almost going to abstract away the way packages were offered to the game. Our big concern was that we have almost 40.000 registered users and we didn’t want to step on your toes with regards to package sizes, bandwidth consumed and so on. We wanted to make sure we weren’t causing any cause of problems as a free user of MyGet.</p>  <p>As far as quality goes we have absolutely had no problems with MyGet at all. It’s really easy to upload and manage packages and we’re now looking into using the build system you have as that’s pretty neat.”</p>  <h2>As a last question, do you have any advice for people starting with NuGet or MyGet?</h2>  <p>“For MyGet not so much as it can’t be more straightforward. Even people that didn’t know what NuGet was were able to setup feeds and upload their games in a matter of a minutes. That was really easy and I would encourage people to try it out. You guys are doing some awesome stuff!</p>  <p>One thing I’ve noticed with NuGet that tripped people up is versioning, sometimes the version numbers weren’t sorted in the way we’ve expected but we’ve tackled that. I believe Xavier <a href="http://www.xavierdecoster.com/semantic-versioning-auto-incremented-nuget-package-versions">had a blog post about this</a>.</p>  <p>Another thing is most people seem to be focused on creating or consuming packages and that is also what all the documentation on the NuGet site is about. Once you realize that NuGet can also be used as a distribution system of packages for your own application, things get more interesting. You can get started developing such thing by adding the NuGet.Core assembly to your project and navigating around with IntelliSense. The whole system is pretty slick and I’m using it in other applications I work on as well.</p>  <p>NuGet has a lot more uses than what can be seen at first sight, there is a whole lot to explore!”</p>  <hr />  <p>Thank you Kelly for this chat, really appreciated!</p>  <p>Just like OCTGN, if you are working on an open source project you can get an <a href="http://www.myget.org/opensource">Open Source subscription plan</a> for your project!</p>  <p><i>Happy packaging!</i></p>

