---
layout: post
title: "Building NuGet and npm using Atlassian Bitbucket Pipelines"
date: 2016-09-08 05:04:00 +0200
comments: true
published: true
categories: ["post"]
tags: ["Feature", "Npm", "NuGet", "Stories"]
alias: ["/post/2016/09/08/Building-NuGet-and-npm-using-Atlassian-Bitbucket-Pipelines.aspx", "/post/2016/09/08/building-nuget-and-npm-using-atlassian-bitbucket-pipelines.aspx"]
author: "Maarten Balliauw"
redirect_from:
 - /post/2016/09/08/Building-NuGet-and-npm-using-Atlassian-Bitbucket-Pipelines.aspx.html
 - /post/2016/09/08/building-nuget-and-npm-using-atlassian-bitbucket-pipelines.aspx.html
---

<p><a href="https://bitbucket.org/product/features/pipelines">Bitbucket Pipelines</a> is a new continuous integration service (still in beta) from Atlassian, built into <a href="http://www.bitbucket.org">Bitbucket</a>. Let’s have a look at how we can use Bitbucket pipelines to build, package and publish a .NET Core library to MyGet so we can consume it in our own projects.</p> <h2>How does Bitbucket pipelines work?</h2> <p>To configure a build on Bitbucket, we’ll need a <em>bitbucket_pipelines.yml</em> file which describes the steps to execute as part of the pipeline. Whenever a commit is made to our source repository on Bitbucket, whether git or Mercurial based, a Docker image is started in which our pipeline will be executed.</p> <p>Here’s a <a href="https://blog.maartenballiauw.be/post/2016/08/17/building-nuget-netcore-using-atlassian-bitbucket-pipelines.html">full write-up on how a .NET Core build would work</a>.</p> <h2></h2> <h2>How to package and publish a NuGet package to MyGet?</h2> <p>First of all, we’ll need a <em>bitbucket_pipelines.yml</em> file which loads a .NET Core-enabled Docker image. The pipeline itself will have to run package restore, compile the source code, optionally run tests, then package the library and publish it to our MyGet feed.</p> <p>We have created a sample library at <a href="https://bitbucket.org/myget/sample-pipelines-dotnet/">https://bitbucket.org/myget/sample-pipelines-dotnet/</a>, from which the <em>bitbucket_pipelines.yml</em> file can be copied into your own project. A few environment variables need to be configured for the pipeline (see the header of the <em>bitbucket_pipelines.yml</em> file) to make sure it can publish to our MyGet feed.</p> <p>Once the pipeline completes, we can look at the build output and find the resulting NuGet package on our MyGet feed. The <a href="https://bitbucket.org/myget/sample-pipelines-dotnet/addon/pipelines/home#!/results/%7B01526f99-4dd9-4b92-a091-f033a8c5cc23%7D">full build output</a> is available as well.</p> <p><a href="/images/image_146.png"><img width="800" height="563" title="image" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="image" src="/images/image_thumb_143.png" border="0"></a></p> <h2>How to package and publish an npm package to MyGet?</h2> <p>First of all, we’ll need a <em>bitbucket_pipelines.yml</em> file which loads a Docker image which has node and npm installed. The pipeline itself will have to run npm install, optionally run tests, then package the library and publish it to our MyGet feed.</p> <p>We have created a sample library at <a href="https://bitbucket.org/myget/sample-pipelines-npm/">https://bitbucket.org/myget/sample-pipelines-npm/</a>, from which the <em>bitbucket_pipelines.yml</em> file can be copied into your own project. The header of this file lists a few environment variables that have to be configured for the Bitbucket pipeline. When run completes, we can consult the build output:</p> <p><a href="/images/image_144.png"><img width="800" height="627" title="Publishing npm from BitBucket" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" alt="Publishing npm from BitBucket" src="/images/image_thumb_141.png" border="0"></a></p> <p><em>Happy packaging!</em></p>
{% include imported_disclaimer.html %}
